What happens when you initialize a repository? Why do you need to do it?

    Git keeps a hidden .git folder with meta-data about the repository. When you initialize a
    repository git creates this directory and sets up the initial metadata.


How is the staging area different from the working directory and the repository? What value do you
think it offers?

    Your working directory is an actual directory containing the files in your project. The staging
    area is a list of files from your working directory you are planning to include in your next
    commit. By distinguishing these it is possible to not commit all changed files in a single
    commit, but split them up into separate logical wholes.


How can you use the staging area to make sure you have one commit per logical change?

    You can use git diff and git diff --staging to have a look at which changes you are about to
    commit and which ones you are leaving out. This allows you to make sure the combination of
    changes adds up to a logical whole.


What are some situations when branches would be helpful in keeping your history organized? How would
branches help?

    If you were working on a side change you don't yet want to commit to master until it is ready,
    but you still want to do commit to have the advantages of being able to go back, you could
    create a branch and do the commits on that branch.


How do the diagrams help you visualize the branch structure?

    They help by showing the parents of each commit in each branch. That way you can see when the
    parent in one branch is a commit in a separate branch, which tells you where the branch branched
    off of.


What is the result of merging two branches together? Why do we represent it in the diagram the way
we do?

    The result of merging two branches is a new commit containing the changes in both branches. At
    that point both branches point to the same commit, so they have merged. 
