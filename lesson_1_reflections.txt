How did viewing a diff between two versions of a file help you see the bug that was introduced?

    If you have an old working version and a new broken version diff is very valuable in that it
    shows you only where the old and new files differ. By focusing on only the differences between
    the files it helps you wade through files that are very long. There is also the advantage that
    you can much easier see what exactly changed.


How could having easy access to the entire history of a file make you a more efficient programmer
in the long term?

    If you find some corner case that has been broken for a while you can go back until you find a
    working version and do a diff on the change to that one so you can find the bug. It can also be
    useful in that you revisit old designs to refresh your memory about how things used to be done.


What do you think are the pros and cons of manually choosing when to create a commit, like you do in
Git, vs having versions automatically saved, like Google Docs does?

    The pro of manually creating commits is that you can make sure each individual commit represents
    a logical whole. The con is that you may not create commits as often as you should. Sometimes
    having partial commits within a logical whole could also be useful.


Why do you think some version control systems, like Git, allow saving multiple files in one commit,
while others, like Google Docs, treat each file separately?

    Git deals with code, where the the code in separate file is often highly interrelated. Documents
    you write in Google Docs are much more often self-contained wholes.


How can you use the commands git log and git diff to view the history of files?

    Git log command allows you to scroll through a list of past commits, showing the commit id, date
    and time, author, and commit message. Git diff allows you to diff two different commits,
    allowing you to find out what has changed between those two commits.


How might using version control make you more confident to make changes that could break something?

    If I make sure to commit before making any breaking changes I can always go back to a previous,
    working version.


Now that you have your workspace set up, what do you want to try using Git for?

    Making apps for iOS.
